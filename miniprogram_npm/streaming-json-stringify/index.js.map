{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n/*\n\n  db.collection.find().stream().pipe(Stringify()).pipe(res)\n\n*/\n\nvar Transform = require('readable-stream/transform')\nvar stringify = require('json-stringify-safe')\nvar util = require('util')\n\nutil.inherits(Stringify, Transform)\n\nmodule.exports = Stringify\n\nfunction Stringify(options) {\n  if (!(this instanceof Stringify))\n    return new Stringify(options || {})\n  if (options && options.replacer) {\n    this.replacer = options.replacer;\n  }\n  if (options && options.space !== undefined) {\n    this.space = options.space;\n  }\n  Transform.call(this, options || {})\n  this._writableState.objectMode = true\n\n  // Array Deliminator and Stringifier defaults\n  var opener = options && options.opener ? options.opener : '[\\n'\n  var seperator = options && options.seperator ? options.seperator : '\\n,\\n'\n  var closer = options && options.closer ? options.closer : '\\n]\\n'\n  var stringifier = options && options.stringifier ? options.stringifier : stringify\n\n  // Array Deliminators and Stringifier\n  this.opener = new Buffer(opener, 'utf8')\n  this.seperator = new Buffer(seperator, 'utf8')\n  this.closer = new Buffer(closer, 'utf8')\n  this.stringifier = stringifier\n}\n\n// Flags\nStringify.prototype.started = false\n\n// JSON.stringify options\nStringify.prototype.replacer = null\nStringify.prototype.space = 0\n\nStringify.prototype._transform = function (doc, enc, cb) {\n  if (this.started) {\n    this.push(this.seperator)\n  } else {\n    this.push(this.opener)\n    this.started = true\n  }\n\n  doc = this.stringifier(doc, this.replacer, this.space)\n\n  this.push(new Buffer(doc, 'utf8'))\n  cb()\n}\n\nStringify.prototype._flush = function (cb) {\n  if (!this.started) this.push(this.opener)\n  this.push(this.closer)\n  this.push(null)\n  cb()\n}\n"]}