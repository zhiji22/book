{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nconst co = require('co')\nconst compose = require('koa-compose')\n\n/**\n * Expose `convert()`.\n */\n\nmodule.exports = convert\n\n/**\n * Convert Koa legacy generator-based middleware\n * to modern promise-based middleware.\n *\n *\n * @api public\n * */\n\nfunction convert (mw) {\n  if (typeof mw !== 'function') {\n    throw new TypeError('middleware must be a function')\n  }\n\n  // assume it's Promise-based middleware\n  if (\n    mw.constructor.name !== 'GeneratorFunction' &&\n    mw.constructor.name !== 'AsyncGeneratorFunction'\n  ) {\n    return mw\n  }\n\n  const converted = function (ctx, next) {\n    return co.call(\n      ctx,\n      mw.call(\n        ctx,\n        (function * (next) { return yield next() })(next)\n      ))\n  }\n\n  converted._name = mw._name || mw.name\n  return converted\n}\n\n/**\n * Convert and compose multiple middleware\n * (could mix legacy and modern ones)\n * and return modern promise middleware.\n *\n *\n * @api public\n * */\n\n// convert.compose(mw, mw, mw)\n// convert.compose([mw, mw, mw])\nconvert.compose = function (arr) {\n  if (!Array.isArray(arr)) {\n    arr = Array.from(arguments)\n  }\n\n  return compose(arr.map(convert))\n}\n\n/**\n * Convert Koa modern promise-based middleware\n * to legacy generator-based middleware.\n *\n *\n * @api public\n * */\n\nconvert.back = function (mw) {\n  if (typeof mw !== 'function') {\n    throw new TypeError('middleware must be a function')\n  }\n\n  // assume it's generator middleware\n  if (mw.constructor.name === 'GeneratorFunction' || mw.constructor.name === 'AsyncGeneratorFunction') {\n    return mw\n  }\n\n  const converted = function * (next) {\n    const ctx = this\n    let called = false\n\n    yield mw(ctx, function () {\n      if (called) {\n        // guard against multiple next() calls\n        // https://github.com/koajs/compose/blob/4e3e96baf58b817d71bd44a8c0d78bb42623aa95/index.js#L36\n        throw new Error('next() called multiple times')\n      }\n\n      called = true\n      return co.call(ctx, next)\n    })\n  }\n\n  converted._name = mw._name || mw.name\n  return converted\n}\n"]}